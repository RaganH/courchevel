// Generated by SpatialOS codegen. DO NOT EDIT!
// source: schema.ragan.wealth in improbable/player/wealth.proto.

namespace Ragan
{

public static class Wealth_Extensions
{
  public static Wealth.Data Get(this global::Improbable.Worker.IComponentData<Wealth> data)
  {
    return (Wealth.Data) data;
  }

  public static Wealth.Update Get(this global::Improbable.Worker.IComponentUpdate<Wealth> update)
  {
    return (Wealth.Update) update;
  }
}

public partial class Wealth : global::Improbable.Worker.IComponentMetaclass
{
  public uint ComponentId
  {
    get { return 1234; }
  }

  // Concrete data type for the Wealth state.
  public class Data : global::Improbable.Worker.IComponentData<Wealth>
  {
    public global::Ragan.WealthData Value;

    public Data(global::Ragan.WealthData value)
    {
      Value = value;
    }

    public Data DeepCopy()
    {
      return new Data(Value.DeepCopy());
    }
  }

  // Concrete update type for the Wealth state.
  public class Update : global::Improbable.Worker.IComponentUpdate<Wealth>
  {
    /// <summary>
    /// Field current = 1.
    /// </summary>
    public global::Improbable.Collections.Option<int> current;
    public Update SetCurrent(int _value)
    {
      current.Set(_value);
      return this;
    }

    public Update DeepCopy()
    {
      var _result = new Update();
      if (current.HasValue)
      {
        int field;
        field = current.Value;
        _result.current.Set(field);
      }
      return _result;
    }

    public global::Improbable.Worker.IComponentData<Wealth> ToInitialData()
    {
      return new Data(new global::Ragan.WealthData(current.Value));
    }

    public void ApplyTo(global::Improbable.Worker.IComponentData<Wealth> _data)
    {
      var _concrete = _data.Get();
      if (current.HasValue)
      {
        _concrete.Value.current = current.Value;
      }
    }
  }

  // Implementation details below here.
  //----------------------------------------------------------------

  public global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentVtable Vtable {
    get {
      global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentVtable vtable;
      vtable.ComponentId = ComponentId;
      vtable.Free = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientComponents.ClientComponentFree);
      vtable.BufferFree = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientComponents.ClientComponentBufferFree);
      vtable.Copy = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientComponentCopy);
      vtable.Deserialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientComponentDeserialize);
      vtable.Serialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientComponentSerialize);
      return vtable;
    }
  }

  public void ExtractInitialData(global::Improbable.Worker.Entity entity,
                                 global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentUpdate update)
  {
    var dereferenced = global::Improbable.Worker.Internal.ClientComponents.Instance
        .Dereference<Wealth>(update.Reference);
    entity.Add<Wealth>(dereferenced.ToInitialData());
  }

  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentCopy
      clientComponentCopy = ClientComponentCopy;
  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentDeserialize
      clientComponentDeserialize = ClientComponentDeserialize;
  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentSerialize
      clientComponentSerialize = ClientComponentSerialize;

  private static unsafe global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentUpdate*
  ClientComponentCopy(global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentUpdate* update)
  {
    global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentUpdate* copy = null;
    try
    {
      var dereferenced = global::Improbable.Worker.Internal.ClientComponents.Instance
          .Dereference<Wealth>(update->Reference);
      copy = global::Improbable.Worker.Internal.ClientComponents.UpdateAlloc();
      copy->Reference = global::Improbable.Worker.Internal.ClientComponents.Instance
          .CreateReference(dereferenced);
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
    }
    return copy;
  }

  private static unsafe bool
  ClientComponentDeserialize(global::System.Byte* buffer,
                             System.UInt32 length,
                             global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentUpdate** update)
  {
    *update = null;
    try
    {
      var data = new Update();
      *update = global::Improbable.Worker.Internal.ClientComponents.UpdateAlloc();
      (*update)->Reference = global::Improbable.Worker.Internal.ClientComponents.Instance
          .CreateReference<Wealth>(data);
      var stream = new global::System.IO.UnmanagedMemoryStream(buffer, (long) length);
      var message = global::ProtoBuf.Serializer
          .Deserialize<global::Improbable.Protocol.ComponentUpdate>(stream);
      var _proto = global::ProtoBuf.Extensible.GetValue<global::Schema.Ragan.WealthData>(
          message.ComponentData, (int) 1234);
      if (_proto.CurrentSpecified)
      {
        int field;
        field = _proto.Current;
        data.current.Set(field);
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return false;
    }
    return true;
  }

  private static unsafe void
  ClientComponentSerialize(global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentUpdate* update,
                           global::System.Int64 entityId,
                           global::System.Byte** buffer,
                           global::System.UInt32* length)
  {
    *buffer = null;
    try
    {
      var message = new global::Improbable.Protocol.FromEngineMsg();
      message.ComponentUpdate = new global::Improbable.Protocol.ComponentUpdate();
      message.ComponentUpdate.EntityId = entityId;
      message.ComponentUpdate.ComponentId = 1234;
      message.ComponentUpdate.ComponentData = new global::Schema.Improbable.EntityState();
      var _proto = new global::Schema.Ragan.WealthData();
      var data = global::Improbable.Worker.Internal.ClientComponents.Instance
          .Dereference<Wealth>(update->Reference).Get();
      if (data.current.HasValue)
      {
        _proto.Current = data.current.Value;
      }
      global::ProtoBuf.Extensible.AppendValue(
          message.ComponentUpdate.ComponentData, 1234, _proto);
      using (var stream = new global::Improbable.Worker.Internal.ExpandableUnmanagedMemoryStream())
      {
        global::ProtoBuf.Serializer.Serialize(stream, message);
        *buffer = stream.TakeOwnershipOfBuffer();
        *length = (uint) stream.Length;
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
    }
  }
}

}
